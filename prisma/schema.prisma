generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  role                    String?   @default("user")
  accounts                Account[]
  sessions                Session[]
  professional_profile_id String?   @unique
  personal_profile_id     String?   @unique
  address_id              String?   @unique
  leave_profile_id        String?   @unique
  project_profile_id      String?   @unique

  PersonalProfile     PersonalProfile?
  ProfessionalProfile ProfessionalProfile?
  Address             Address?
  LeaveProfile        LeaveProfile?
  ProjectProfile      ProjectProfile[]
  Project             Project[]
  Leave               Leave[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PersonalProfile {
  id              String  @id @default(cuid())
  user_id         String  @unique
  first_name      String?
  last_name       String?
  date_of_birth   String?
  personal_mobile String? @unique
  personal_email  String? @unique
  editable        Boolean @default(true)
  about           String?
  // last_updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model ProfessionalProfile {
  id              String  @id @default(cuid())
  user_id         String  @unique
  job_type        String?
  // email           String? @unique
  // mobile          String? @unique
  notice_period   Int?    @default(3)
  editable        Boolean @default(true)
  date_of_join    String
  // last_updated_at  DateTime @updatedAt
  department_id   String?
  designation_id  String?
  workLocation_id String?

  department    Department?   @relation(fields: [department_id], references: [id])
  designation   Designation?  @relation(fields: [designation_id], references: [id])
  work_location WorkLocation? @relation(fields: [workLocation_id], references: [id])
  user          User?         @relation(fields: [user_id], references: [id])
}

model LeaveProfile {
  id                    String @id @default(cuid())
  user_id               String @unique
  leaves_per_month      Float? @default(2)
  carry_foreward_leaves Float? @default(0)
  leaves_taken          Int?   @default(0)

  user  User?   @relation(fields: [user_id], references: [id])
  Leave Leave[]
}

model ProjectProfile {
  id                String  @id @default(cuid())
  user_id           String
  project_id        String  @unique
  project_join_date String?
  project_exit_date String?
  role              String?
  status            String?

  user    User     @relation(fields: [user_id], references: [id])
  Project Project? @relation(fields: [project_id], references: [id])
}

model WorkLocation {
  id       String @id @default(cuid())
  location String @unique

  ProfessionalProfile ProfessionalProfile[]
}

model Department {
  id   String @id @default(cuid())
  dept String @unique

  project             Project[]
  ProfessionalProfile ProfessionalProfile[]
}

model Project {
  id           String  @id @default(cuid())
  project_name String  @unique
  client_name  String?
  department   String?
  manager_id   String?
  start_date   String?
  end_date     String?
  description  String?

  manager User?       @relation(fields: [manager_id], references: [id])
  dept    Department? @relation(fields: [department], references: [dept])
  client  Client?     @relation(fields: [client_name], references: [name])

  ProjectProfile ProjectProfile?
}

model Client {
  id   String @id @default(cuid())
  name String @unique

  Project Project[]
}

model Designation {
  id          String @id @default(cuid())
  designation String @unique

  ProfessionalProfile ProfessionalProfile[]
}

model Address {
  id        String  @id @default(cuid())
  user_id   String  @unique
  door_num  String
  add_line1 String
  add_line2 String?
  city      String
  state     String
  country   String
  zipcode   String
  // last_updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id])
}

model Leave {
  id               String   @id @default(cuid())
  start_date       String
  end_date         String
  leave_dates      String[]
  num_days         Int
  leave_type       String
  reason           String
  status           String?  @default("pending")
  leave_profile_id String
  manager_id       String?
  manager          User?    @relation(fields: [manager_id], references: [id])
  requested_at     DateTime @updatedAt

  leaveProfile LeaveProfile? @relation(fields: [leave_profile_id], references: [id])
}

// leave types - sick, priviliged, maternity, peternity, other
// leave status - pending, approved, rejected.

// enum LeaveType {
//   "SICK"

// }

model Holiday {
  id          String  @id @default(cuid())
  date        String
  description String  @default("Not Specified")
  location    String
  country     String?

  @@unique([date, location])
}
