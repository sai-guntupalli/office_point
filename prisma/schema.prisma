generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  professional_profile_id String?   @unique
  personal_profile_id     String?   @unique
  address_id              String?   @unique

  PersonalProfile     PersonalProfile?
  ProfessionalProfile ProfessionalProfile?
  Address             Address?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PersonalProfile {
  id              String  @id @default(cuid())
  user_id         String  @unique
  first_name      String?
  last_name       String?
  date_of_birth   String?
  personal_mobile String? @unique
  personal_email  String? @unique
  editable        Boolean @default(true)
  about           String?
  // last_updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])

}

model ProfessionalProfile {
  id               String  @id @default(cuid())
  user_id          String? @unique
  emp_id           String? @unique
  role             String?
  job_type         String?
  email            String? @unique
  mobile           String? @unique
  manager          String?
  notice_period    Int?    @default(3)
  leaves_per_month Float?  @default(2)
  editable         Boolean @default(true)
  date_of_join     String
  // last_updated_at  DateTime @updatedAt
  department_id    String?
  project_id       String?
  designation_id   String?
  workLocation_id  String?

  department    Department?   @relation(fields: [department_id], references: [id])
  project       Project?      @relation(fields: [project_id], references: [id])
  designation   Designation?  @relation(fields: [designation_id], references: [id])
  work_location WorkLocation? @relation(fields: [workLocation_id], references: [id])
  user          User?         @relation(fields: [user_id], references: [id])
}

model WorkLocation {
  id       String @id @default(cuid())
  location String @unique

  ProfessionalProfile ProfessionalProfile[]
}

model Department {
  id   String @id @default(cuid())
  dept String @unique

  project             Project[]
  ProfessionalProfile ProfessionalProfile[]
}

model Project {
  id           String  @id @default(cuid())
  project_name String  @unique
  client_name  String?
  department   String?
  manager      String?

  dept   Department? @relation(fields: [department], references: [dept])
  client Client?     @relation(fields: [client_name], references: [name])

  ProfessionalProfile ProfessionalProfile[]
}

model Client {
  id   String @id @default(cuid())
  name String @unique

  Project Project[]
}

model Designation {
  id          String @id @default(cuid())
  designation String @unique

  ProfessionalProfile ProfessionalProfile[]
}

model Address {
  id        String  @id @default(cuid())
  user_id   String  @unique
  door_num  String
  add_line1 String
  add_line2 String?
  city      String
  state     String
  country   String
  zipcode   String
  // last_updated_at DateTime @updatedAt

  user User? @relation(fields: [user_id], references: [id])

}
