// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  PersonalInfo     PersonalInfo[]
  ProfessionalInfo ProfessionalInfo[]
  Address          Address[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Employee {
//   id String @id @default(cuid())
//   emp_id String @unique
//   personal_info

// }

model PersonalInfo {
  id              String   @id @default(cuid())
  user_id         String
  first_name      String
  last_name       String
  date_of_birth   String
  mobile_num      BigInt   @unique
  personal_email  String   @unique
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  address         Address? @relation(fields: [address_id], references: [id])
  address_id      String?
  editable        Boolean  @default(true)
  last_updated_at DateTime @updatedAt
}

model ProfessionalInfo {

  id               String   @id @default(cuid())
  user_id          String
  emp_id           String   @unique
  designation      String
  mobile_num       BigInt   @unique
  email_id         String   @unique
  department       String
  project          String?
  date_of_join     DateTime @default(now())
  reports_to       String // @relation("managerRelation", fields: [emp_id], references: [id])
  work_location    String
  notice_period    Int?     @default(3)
  leaves_per_month Float?   @default(2)
  editable         Boolean  @default(true)
  last_updated_at  DateTime @updatedAt

  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  location        WorkLocation @relation(fields: [work_location], references: [location])
  dept            Department   @relation(fields: [department], references: [dept])
  proj            Project?     @relation(fields: [project], references: [project_name])
  designation_key Designation  @relation(fields: [designation], references: [desination])
}

model WorkLocation {
  id       String @id @default(cuid())
  location String @unique

  ProfessionalInfo ProfessionalInfo[]
}

model Department {
  id   String @id @default(cuid())
  dept String @unique

  ProfessionalInfo ProfessionalInfo[]
  Project          Project[]
}

model Project {
  id           String @id @default(cuid())
  project_name String @unique
  client_name  String
  department   String

  dept   Department @relation(fields: [department], references: [dept])
  client Client     @relation(fields: [client_name], references: [name])

  ProfessionalInfo ProfessionalInfo[]
}

model Client {
  id   String @id @default(cuid())
  name String @unique

  Project Project[]
}

model Designation {
  id         String @id @default(cuid())
  desination String @unique

  ProfessionalInfo ProfessionalInfo[]
}

model Address {
  id              String         @id @default(cuid())
  user_id         String
  door_num        String
  add_line1       String
  add_line2       String?
  city            String
  state           String
  country         String
  zipcode         String
  last_updated_at DateTime       @updatedAt
  user            User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  PersonalInfo    PersonalInfo[]
}
